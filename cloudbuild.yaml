steps:
# 1. GENEROWANIE PLIKU firebase_options.dart (Wersja odporna na błąd walidacji - Python)
- name: 'python:3-slim' # Używamy czystego obrazu Pythona
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      mkdir -p lib
      
      # Python generuje plik z bezpiecznym wstrzyknięciem zmiennych środowiskowych
      python3 -c "
      import os

      API_KEY = os.environ.get('FIREBASE_API_KEY')
      PROJECT_ID = os.environ.get('PROJECT_ID')

      config_content = f'''
      // Plik wygenerowany automatycznie przez Cloud Build.
      import 'package:firebase_core/firebase_core.dart';

      const FirebaseOptions defaultFirebaseOptions = FirebaseOptions(
        apiKey: '{API_KEY}', 
        appId: 'TWOJ_APP_ID', 
        messagingSenderId: 'TWOJ_MESSAGING_ID', 
        projectId: '{PROJECT_ID}',
      );
      '''

      # Zapisanie pliku
      with open('lib/firebase_options.dart', 'w') as f:
          f.write(config_content)
      "
  secretEnv: ['FIREBASE_API_KEY']  

  # 1. Budowanie Flutter Web z użyciem Twojego szybkiego, wstępnie zbudowanego obrazu
  # Ten krok jest teraz natychmiastowy, ponieważ obraz jest już gotowy w GCR.
- name: 'gcr.io/mydog24crm/flutter-builder:latest' 
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Nie musimy nic instalować! Wszystko jest już gotowe.
      flutter config --enable-web
      flutter pub get
      flutter build web --release

  # 2. Wdrożenie na Firebase Hosting (używamy Node.js, które działało ostatnim razem)
- name: 'node:20' 
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      npm install -g firebase-tools
      firebase deploy --only hosting --project ${PROJECT_ID}

available_secrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/FIREBASE_API_KEY/versions/latest
    env: FIREBASE_API_KEY

options:
  logging: CLOUD_LOGGING_ONLY

timeout: '1600s'