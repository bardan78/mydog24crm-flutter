steps:
# 1. GENEROWANIE PLIKU firebase_options.dart (Poprawiona składnia BASH)
- name: 'bash'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      mkdir -p lib
      
      # Używamy printf do bezpiecznego wstrzykiwania zmiennych do pliku Dart
      # Zwróć uwagę, że cały plik jest budowany jako jeden ciąg
      printf "// Plik wygenerowany automatycznie przez Cloud Build.\n" > lib/firebase_options.dart
      printf "import 'package:firebase_core/firebase_core.dart';\n\n" >> lib/firebase_options.dart
      printf "const FirebaseOptions defaultFirebaseOptions = FirebaseOptions(\n" >> lib/firebase_options.dart
      printf "  apiKey: '%s',\n" "$FIREBASE_API_KEY" >> lib/firebase_options.dart
      printf "  appId: 'TWOJ_APP_ID',\n" >> lib/firebase_options.dart # Zmień na swój App ID
      printf "  messagingSenderId: 'TWOJ_MESSAGING_ID',\n" >> lib/firebase_options.dart # Zmień na swój Sender ID
      printf "  projectId: '%s',\n" "${PROJECT_ID}" >> lib/firebase_options.dart
      printf ");\n" >> lib/firebase_options.dart

  secretEnv: ['FIREBASE_API_KEY']
  # 1. Budowanie Flutter Web z użyciem Twojego szybkiego, wstępnie zbudowanego obrazu
  # Ten krok jest teraz natychmiastowy, ponieważ obraz jest już gotowy w GCR.
- name: 'gcr.io/mydog24crm/flutter-builder:latest' 
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Nie musimy nic instalować! Wszystko jest już gotowe.
      flutter config --enable-web
      flutter pub get
      flutter build web --release

  # 2. Wdrożenie na Firebase Hosting (używamy Node.js, które działało ostatnim razem)
- name: 'node:20' 
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      npm install -g firebase-tools
      firebase deploy --only hosting --project ${PROJECT_ID}

options:
  logging: CLOUD_LOGGING_ONLY

timeout: '1600s'